@use '../../styles/variables' as vars;
@use '../../styles/mixins' as mix;
@use '../../styles/functions' as fn;

.bento-grid {
  display: grid;
  gap: fn.get-spacing('md');
  padding: fn.get-spacing('md');
  width: 100%;
  min-height: 500px;
  background-color: fn.get-color('background');
  border-radius: fn.get-border-radius('lg');
  position: relative;

  // Стили для пустых ячеек
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
      linear-gradient(to right, transparent calc(25% - 1px), fn.get-color('border') calc(25% - 1px), fn.get-color('border') 25%, transparent 25%) 0 0,
      linear-gradient(to right, transparent calc(50% - 1px), fn.get-color('border') calc(50% - 1px), fn.get-color('border') 50%, transparent 50%) 0 0,
      linear-gradient(to right, transparent calc(75% - 1px), fn.get-color('border') calc(75% - 1px), fn.get-color('border') 75%, transparent 75%) 0 0,
      linear-gradient(to bottom, transparent calc(25% - 1px), fn.get-color('border') calc(25% - 1px), fn.get-color('border') 25%, transparent 25%) 0 0,
      linear-gradient(to bottom, transparent calc(50% - 1px), fn.get-color('border') calc(50% - 1px), fn.get-color('border') 50%, transparent 50%) 0 0,
      linear-gradient(to bottom, transparent calc(75% - 1px), fn.get-color('border') calc(75% - 1px), fn.get-color('border') 75%, transparent 75%) 0 0;
    pointer-events: none;
    z-index: 0;
  }

  // Стили для дропзоны
  &[data-rbd-droppable-id] {
    min-height: 100%;
  }

  // Стили для плейсхолдера
  [data-rbd-placeholder-context-id] {
    background-color: rgba(fn.get-color('primary'), 0.1);
    border: 2px dashed rgba(fn.get-color('primary'), 0.3);
    border-radius: fn.get-border-radius('md');
    margin: 0;
  }

  &__item {
    @include mix.widget-base;
    position: relative;
    transition: all fn.get-transition('base');
    
    &--small {
      @include mix.grid-item('small');
    }
    
    &--medium {
      @include mix.grid-item('medium');
    }
    
    &--large {
      @include mix.grid-item('large');
    }
    
    &--dragging {
      opacity: 0.5;
      transform: scale(1.02);
      z-index: fn.get-z-index('modal');
    }
  }
}

// Медиа-запросы для адаптивности
@media (max-width: fn.get-breakpoint('md')) {
  .bento-grid {
    grid-template-columns: repeat(2, 1fr) !important;
    gap: fn.get-spacing('sm');
  }
}

@media (max-width: fn.get-breakpoint('sm')) {
  .bento-grid {
    grid-template-columns: 1fr !important;
  }
} 